
MyAlarmClock.elf:     file format elf32-littlenios2
MyAlarmClock.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001110 memsz 0x00001110 flags r-x
    LOAD off    0x00002130 vaddr 0x00011130 paddr 0x00011254 align 2**12
         filesz 0x00000124 memsz 0x00000124 flags rw-
    LOAD off    0x00002378 vaddr 0x00011378 paddr 0x00011378 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000f30  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000080  000110b0  000110b0  000020b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000124  00011130  00011254  00002130  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00011378  00011378  00002378  2**2
                  ALLOC, SMALL_DATA
  6 .memory       00000000  00011498  00011498  00002254  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003c0  00000000  00000000  00002278  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000046db  00000000  00000000  00002638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a54  00000000  00000000  00006d13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c1e  00000000  00000000  00008767  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004dc  00000000  00000000  0000a388  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000160b  00000000  00000000  0000a864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000178f  00000000  00000000  0000be6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000d600  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c0  00000000  00000000  0000d610  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000ec9a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000ec9d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000eca0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000eca1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0000eca2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0000eca6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000ecaa  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0000ecae  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001d  00000000  00000000  0000ecb8  2**0
                  CONTENTS, READONLY
 26 .jdi          0000466a  00000000  00000000  0000ecd5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e065  00000000  00000000  0001333f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
000110b0 l    d  .rodata	00000000 .rodata
00011130 l    d  .rwdata	00000000 .rwdata
00011378 l    d  .bss	00000000 .bss
00011498 l    d  .memory	00000000 .memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MyAlarmClock_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000101bc l     F .text	00000178 timer_isr
0001137c l     O .bss	00000004 minutes.3026
00011238 l     O .rwdata	00000002 seconds.3025
00011378 l     O .bss	00000004 hrs.3027
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010688 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00011158 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00011394 g     O .bss	00000004 alt_instruction_exception_handler
00010f48 g     F .text	0000002c alt_main
000105d8 g     F .text	00000080 _puts_r
00011398 g     O .bss	00000100 alt_irq
00011254 g       *ABS*	00000000 __flash_rwdata_start
0001058c g     F .text	0000004c printf
000110a8 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00011380 g     O .bss	00000004 errno
0001138c g     O .bss	00000004 alt_argv
00019238 g       *ABS*	00000000 _gp
0001124c g     O .rwdata	00000004 jtag
00010658 g     F .text	00000014 puts
00011034 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00010550 g     F .text	0000003c _printf_r
00010494 g     F .text	00000064 .hidden __udivsi3
00011240 g     O .rwdata	00000004 _global_impure_ptr
00011498 g       *ABS*	00000000 __bss_end
00010e00 g     F .text	00000068 alt_iic_isr_register
00010de8 g     F .text	00000018 alt_ic_irq_enabled
00011384 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
0001102c g     F .text	00000004 alt_dcache_flush_all
00011254 g       *ABS*	00000000 __ram_rwdata_end
00010f74 g     F .text	00000060 write
00011130 g       *ABS*	00000000 __ram_rodata_end
000104f8 g     F .text	00000058 .hidden __umodsi3
00011498 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
0001bfa4 g       *ABS*	00000000 __alt_stack_pointer
00010ff8 g     F .text	00000034 altera_avalon_jtag_uart_write
000106f4 g     F .text	0000052c ___vfprintf_internal_r
00010334 g     F .text	00000040 init_timer_interrupt
00010180 g     F .text	0000003c _start
00010ff4 g     F .text	00000004 alt_sys_init
00010d4c g     F .text	00000028 .hidden __mulsi3
00011130 g       *ABS*	00000000 __ram_rwdata_start
000110b0 g       *ABS*	00000000 __ram_rodata_start
00011498 g       *ABS*	00000000 __alt_stack_base
00010c3c g     F .text	000000b8 __sfvwrite_small_dev
00011378 g       *ABS*	00000000 __bss_start
00010374 g     F .text	00000028 main
00011388 g     O .bss	00000004 alt_envp
0001123c g     O .rwdata	00000004 time
00011250 g     O .rwdata	00000004 alt_errno
0001039c g     F .text	00000084 .hidden __divsi3
000110b0 g       *ABS*	00000000 __flash_rodata_start
00010fd4 g     F .text	00000020 alt_irq_init
00010cf4 g     F .text	00000058 _write_r
00011244 g     O .rwdata	00000004 _impure_ptr
00011390 g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010d74 g     F .text	00000004 alt_ic_isr_register
00011254 g       *ABS*	00000000 _edata
00011498 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010db0 g     F .text	00000038 alt_ic_irq_disable
00010000 g       *ABS*	00000000 __alt_mem_memory
00010420 g     F .text	00000074 .hidden __modsi3
0001bfa4 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001000c g       .entry	00000000 _exit
0001066c g     F .text	0000001c strlen
00011030 g     F .text	00000004 alt_icache_flush_all
00011248 g     O .rwdata	00000004 alt_priority_mask
00010d78 g     F .text	00000038 alt_ic_irq_enable
00010c20 g     F .text	0000001c __vfprintf_internal
00011130 g     O .rwdata	00000028 Display
00010e68 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1010c:	04000074 	movhi	r16,1
   10110:	8404e604 	addi	r16,r16,5016

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	0005883a 	mov	r2,zero
    mask = 1;
   10118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	20ca703a 	and	r5,r4,r3
   10120:	28000b26 	beq	r5,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   10124:	100490fa 	slli	r2,r2,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	203ff51e 	bne	r4,zero,10114 <__alt_data_end+0xffff4170>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	18c7883a 	add	r3,r3,r3
      i++;
   10154:	10800044 	addi	r2,r2,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff4178>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a05717 	ldw	r2,-32420(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	deefe914 	ori	sp,sp,49060
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a48e14 	ori	gp,gp,37432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1084de14 	ori	r2,r2,4984

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c52614 	ori	r3,r3,5272

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff4200>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010e680 	call	10e68 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010f480 	call	10f48 <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff4214>

000101bc <timer_isr>:
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
                                                     ALTERA_AVALON_TIMER_CONTROL_START_MSK |
                                                     ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

static void timer_isr(void *context, alt_u32 id) {
   101bc:	defffa04 	addi	sp,sp,-24
    static short seconds = 55;// Clear the interrupt
    static int minutes=0;
    static int hrs=0;
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);// Clear the interrupt
   101c0:	008000b4 	movhi	r2,2
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
                                                     ALTERA_AVALON_TIMER_CONTROL_START_MSK |
                                                     ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

static void timer_isr(void *context, alt_u32 id) {
   101c4:	dfc00515 	stw	ra,20(sp)
   101c8:	dd000415 	stw	r20,16(sp)
   101cc:	dcc00315 	stw	r19,12(sp)
   101d0:	dc800215 	stw	r18,8(sp)
   101d4:	dc400115 	stw	r17,4(sp)
   101d8:	dc000015 	stw	r16,0(sp)
    static short seconds = 55;// Clear the interrupt
    static int minutes=0;
    static int hrs=0;
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);// Clear the interrupt
   101dc:	10840004 	addi	r2,r2,4096
   101e0:	10000035 	stwio	zero,0(r2)
    // Do something
    //*time=Display[seconds%10];
    alt_u32 calculo=(((Display[seconds%10])&0xFFFFFFFF)+((Display[seconds/10]<<7)&0xFFFFFFFF)+((Display[minutes%10]<<14)&0xFFFFFFFF)+((Display[minutes/10]<<21)&0xFFFFFFFF));
   101e4:	d5205117 	ldw	r20,-32444(gp)
   101e8:	d420000b 	ldhu	r16,-32768(gp)
   101ec:	01400284 	movi	r5,10
   101f0:	a009883a 	mov	r4,r20
   101f4:	00104200 	call	10420 <__modsi3>
   101f8:	84ffffcc 	andi	r19,r16,65535
   101fc:	04400074 	movhi	r17,1
   10200:	1085883a 	add	r2,r2,r2
   10204:	9ce0001c 	xori	r19,r19,32768
   10208:	8c444c04 	addi	r17,r17,4400
   1020c:	9ce00004 	addi	r19,r19,-32768
   10210:	1085883a 	add	r2,r2,r2
   10214:	8885883a 	add	r2,r17,r2
   10218:	01400284 	movi	r5,10
   1021c:	9809883a 	mov	r4,r19
   10220:	14800017 	ldw	r18,0(r2)
   10224:	00104200 	call	10420 <__modsi3>
   10228:	10bfffcc 	andi	r2,r2,65535
   1022c:	10a0001c 	xori	r2,r2,32768
   10230:	10a00004 	addi	r2,r2,-32768
   10234:	1085883a 	add	r2,r2,r2
   10238:	1085883a 	add	r2,r2,r2
   1023c:	8885883a 	add	r2,r17,r2
   10240:	10800017 	ldw	r2,0(r2)
   10244:	902493ba 	slli	r18,r18,14
   10248:	01400284 	movi	r5,10
   1024c:	a009883a 	mov	r4,r20
   10250:	90a5883a 	add	r18,r18,r2
   10254:	001039c0 	call	1039c <__divsi3>
   10258:	1085883a 	add	r2,r2,r2
   1025c:	1085883a 	add	r2,r2,r2
   10260:	8885883a 	add	r2,r17,r2
   10264:	10800017 	ldw	r2,0(r2)
   10268:	01400284 	movi	r5,10
   1026c:	9809883a 	mov	r4,r19
   10270:	1004957a 	slli	r2,r2,21
    *time=calculo;
    printf("\nTimer Expired: %d", seconds++);
   10274:	84000044 	addi	r16,r16,1
    static int minutes=0;
    static int hrs=0;
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);// Clear the interrupt
    // Do something
    //*time=Display[seconds%10];
    alt_u32 calculo=(((Display[seconds%10])&0xFFFFFFFF)+((Display[seconds/10]<<7)&0xFFFFFFFF)+((Display[minutes%10]<<14)&0xFFFFFFFF)+((Display[minutes/10]<<21)&0xFFFFFFFF));
   10278:	90a5883a 	add	r18,r18,r2
   1027c:	001039c0 	call	1039c <__divsi3>
   10280:	10bfffcc 	andi	r2,r2,65535
   10284:	10a0001c 	xori	r2,r2,32768
   10288:	10a00004 	addi	r2,r2,-32768
   1028c:	1085883a 	add	r2,r2,r2
   10290:	1085883a 	add	r2,r2,r2
   10294:	8885883a 	add	r2,r17,r2
   10298:	10800017 	ldw	r2,0(r2)
    *time=calculo;
   1029c:	d0e00117 	ldw	r3,-32764(gp)
    printf("\nTimer Expired: %d", seconds++);
   102a0:	01000074 	movhi	r4,1
    static int minutes=0;
    static int hrs=0;
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);// Clear the interrupt
    // Do something
    //*time=Display[seconds%10];
    alt_u32 calculo=(((Display[seconds%10])&0xFFFFFFFF)+((Display[seconds/10]<<7)&0xFFFFFFFF)+((Display[minutes%10]<<14)&0xFFFFFFFF)+((Display[minutes/10]<<21)&0xFFFFFFFF));
   102a4:	100491fa 	slli	r2,r2,7
    *time=calculo;
    printf("\nTimer Expired: %d", seconds++);
   102a8:	980b883a 	mov	r5,r19
   102ac:	21042c04 	addi	r4,r4,4272
    static int minutes=0;
    static int hrs=0;
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);// Clear the interrupt
    // Do something
    //*time=Display[seconds%10];
    alt_u32 calculo=(((Display[seconds%10])&0xFFFFFFFF)+((Display[seconds/10]<<7)&0xFFFFFFFF)+((Display[minutes%10]<<14)&0xFFFFFFFF)+((Display[minutes/10]<<21)&0xFFFFFFFF));
   102b0:	9085883a 	add	r2,r18,r2
    *time=calculo;
   102b4:	18800015 	stw	r2,0(r3)
    printf("\nTimer Expired: %d", seconds++);
   102b8:	d420000d 	sth	r16,-32768(gp)
   102bc:	001058c0 	call	1058c <printf>

    if(seconds>=60){
   102c0:	d0a0000f 	ldh	r2,-32768(gp)
   102c4:	00c00ec4 	movi	r3,59
   102c8:	1880070e 	bge	r3,r2,102e8 <timer_isr+0x12c>
      	minutes++;
   102cc:	d1605117 	ldw	r5,-32444(gp)
      	printf("\nBOLAS: %d", minutes);
   102d0:	01000074 	movhi	r4,1
   102d4:	21043104 	addi	r4,r4,4292
    alt_u32 calculo=(((Display[seconds%10])&0xFFFFFFFF)+((Display[seconds/10]<<7)&0xFFFFFFFF)+((Display[minutes%10]<<14)&0xFFFFFFFF)+((Display[minutes/10]<<21)&0xFFFFFFFF));
    *time=calculo;
    printf("\nTimer Expired: %d", seconds++);

    if(seconds>=60){
      	minutes++;
   102d8:	29400044 	addi	r5,r5,1
   102dc:	d1605115 	stw	r5,-32444(gp)
      	printf("\nBOLAS: %d", minutes);
   102e0:	001058c0 	call	1058c <printf>
      	seconds=0;
   102e4:	d020000d 	sth	zero,-32768(gp)
    }if(minutes==60){
   102e8:	d0e05117 	ldw	r3,-32444(gp)
   102ec:	00800f04 	movi	r2,60
   102f0:	1880041e 	bne	r3,r2,10304 <timer_isr+0x148>
      	hrs++;
   102f4:	d0a05017 	ldw	r2,-32448(gp)
      	minutes=0;
   102f8:	d0205115 	stw	zero,-32444(gp)
    if(seconds>=60){
      	minutes++;
      	printf("\nBOLAS: %d", minutes);
      	seconds=0;
    }if(minutes==60){
      	hrs++;
   102fc:	10800044 	addi	r2,r2,1
   10300:	d0a05015 	stw	r2,-32448(gp)
      	minutes=0;
    }
    hrs=hrs%24;
   10304:	d1205017 	ldw	r4,-32448(gp)
   10308:	01400604 	movi	r5,24
   1030c:	00104200 	call	10420 <__modsi3>
   10310:	d0a05015 	stw	r2,-32448(gp)





}
   10314:	dfc00517 	ldw	ra,20(sp)
   10318:	dd000417 	ldw	r20,16(sp)
   1031c:	dcc00317 	ldw	r19,12(sp)
   10320:	dc800217 	ldw	r18,8(sp)
   10324:	dc400117 	ldw	r17,4(sp)
   10328:	dc000017 	ldw	r16,0(sp)
   1032c:	dec00604 	addi	sp,sp,24
   10330:	f800283a 	ret

00010334 <init_timer_interrupt>:
    }

    return 0;
}

void init_timer_interrupt(void) {
   10334:	defffe04 	addi	sp,sp,-8
    // Register the ISR with HAL
    alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void*)timer_isr, NULL, 0x0);
   10338:	01800074 	movhi	r6,1
   1033c:	d8000015 	stw	zero,0(sp)
   10340:	000f883a 	mov	r7,zero
   10344:	31806f04 	addi	r6,r6,444
   10348:	000b883a 	mov	r5,zero
   1034c:	0009883a 	mov	r4,zero
    }

    return 0;
}

void init_timer_interrupt(void) {
   10350:	dfc00115 	stw	ra,4(sp)
    // Register the ISR with HAL
    alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void*)timer_isr, NULL, 0x0);
   10354:	0010d740 	call	10d74 <alt_ic_isr_register>

    // Start the timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
   10358:	008000b4 	movhi	r2,2
   1035c:	10840104 	addi	r2,r2,4100
   10360:	00c001c4 	movi	r3,7
   10364:	10c00035 	stwio	r3,0(r2)
                                                     ALTERA_AVALON_TIMER_CONTROL_START_MSK |
                                                     ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}
   10368:	dfc00117 	ldw	ra,4(sp)
   1036c:	dec00204 	addi	sp,sp,8
   10370:	f800283a 	ret

00010374 <main>:

volatile alt_u32  * time= (alt_u32 *) 0x21030;
alt_u32  Display[10]={64,121,36,48,25,18,2,120,0,16};

int main(void) {
    printf("Hello from Nios II!\n");
   10374:	01000074 	movhi	r4,1
static void timer_isr(void *context, alt_u32 id);

volatile alt_u32  * time= (alt_u32 *) 0x21030;
alt_u32  Display[10]={64,121,36,48,25,18,2,120,0,16};

int main(void) {
   10378:	deffff04 	addi	sp,sp,-4
    printf("Hello from Nios II!\n");
   1037c:	21043404 	addi	r4,r4,4304
static void timer_isr(void *context, alt_u32 id);

volatile alt_u32  * time= (alt_u32 *) 0x21030;
alt_u32  Display[10]={64,121,36,48,25,18,2,120,0,16};

int main(void) {
   10380:	dfc00015 	stw	ra,0(sp)
    printf("Hello from Nios II!\n");
   10384:	00106580 	call	10658 <puts>
    printf("This is an interrupt example using an interval timer with interrupts.");
   10388:	01000074 	movhi	r4,1
   1038c:	21043904 	addi	r4,r4,4324
   10390:	001058c0 	call	1058c <printf>

    // Enable the timer
    init_timer_interrupt();
   10394:	00103340 	call	10334 <init_timer_interrupt>
   10398:	003fff06 	br	10398 <__alt_data_end+0xffff43f4>

0001039c <__divsi3>:
   1039c:	20001b16 	blt	r4,zero,1040c <__divsi3+0x70>
   103a0:	000f883a 	mov	r7,zero
   103a4:	28001616 	blt	r5,zero,10400 <__divsi3+0x64>
   103a8:	200d883a 	mov	r6,r4
   103ac:	29001a2e 	bgeu	r5,r4,10418 <__divsi3+0x7c>
   103b0:	00800804 	movi	r2,32
   103b4:	00c00044 	movi	r3,1
   103b8:	00000106 	br	103c0 <__divsi3+0x24>
   103bc:	10000d26 	beq	r2,zero,103f4 <__divsi3+0x58>
   103c0:	294b883a 	add	r5,r5,r5
   103c4:	10bfffc4 	addi	r2,r2,-1
   103c8:	18c7883a 	add	r3,r3,r3
   103cc:	293ffb36 	bltu	r5,r4,103bc <__alt_data_end+0xffff4418>
   103d0:	0005883a 	mov	r2,zero
   103d4:	18000726 	beq	r3,zero,103f4 <__divsi3+0x58>
   103d8:	0005883a 	mov	r2,zero
   103dc:	31400236 	bltu	r6,r5,103e8 <__divsi3+0x4c>
   103e0:	314dc83a 	sub	r6,r6,r5
   103e4:	10c4b03a 	or	r2,r2,r3
   103e8:	1806d07a 	srli	r3,r3,1
   103ec:	280ad07a 	srli	r5,r5,1
   103f0:	183ffa1e 	bne	r3,zero,103dc <__alt_data_end+0xffff4438>
   103f4:	38000126 	beq	r7,zero,103fc <__divsi3+0x60>
   103f8:	0085c83a 	sub	r2,zero,r2
   103fc:	f800283a 	ret
   10400:	014bc83a 	sub	r5,zero,r5
   10404:	39c0005c 	xori	r7,r7,1
   10408:	003fe706 	br	103a8 <__alt_data_end+0xffff4404>
   1040c:	0109c83a 	sub	r4,zero,r4
   10410:	01c00044 	movi	r7,1
   10414:	003fe306 	br	103a4 <__alt_data_end+0xffff4400>
   10418:	00c00044 	movi	r3,1
   1041c:	003fee06 	br	103d8 <__alt_data_end+0xffff4434>

00010420 <__modsi3>:
   10420:	20001716 	blt	r4,zero,10480 <__modsi3+0x60>
   10424:	000f883a 	mov	r7,zero
   10428:	2005883a 	mov	r2,r4
   1042c:	28001216 	blt	r5,zero,10478 <__modsi3+0x58>
   10430:	2900162e 	bgeu	r5,r4,1048c <__modsi3+0x6c>
   10434:	01800804 	movi	r6,32
   10438:	00c00044 	movi	r3,1
   1043c:	00000106 	br	10444 <__modsi3+0x24>
   10440:	30000a26 	beq	r6,zero,1046c <__modsi3+0x4c>
   10444:	294b883a 	add	r5,r5,r5
   10448:	31bfffc4 	addi	r6,r6,-1
   1044c:	18c7883a 	add	r3,r3,r3
   10450:	293ffb36 	bltu	r5,r4,10440 <__alt_data_end+0xffff449c>
   10454:	18000526 	beq	r3,zero,1046c <__modsi3+0x4c>
   10458:	1806d07a 	srli	r3,r3,1
   1045c:	11400136 	bltu	r2,r5,10464 <__modsi3+0x44>
   10460:	1145c83a 	sub	r2,r2,r5
   10464:	280ad07a 	srli	r5,r5,1
   10468:	183ffb1e 	bne	r3,zero,10458 <__alt_data_end+0xffff44b4>
   1046c:	38000126 	beq	r7,zero,10474 <__modsi3+0x54>
   10470:	0085c83a 	sub	r2,zero,r2
   10474:	f800283a 	ret
   10478:	014bc83a 	sub	r5,zero,r5
   1047c:	003fec06 	br	10430 <__alt_data_end+0xffff448c>
   10480:	0109c83a 	sub	r4,zero,r4
   10484:	01c00044 	movi	r7,1
   10488:	003fe706 	br	10428 <__alt_data_end+0xffff4484>
   1048c:	00c00044 	movi	r3,1
   10490:	003ff106 	br	10458 <__alt_data_end+0xffff44b4>

00010494 <__udivsi3>:
   10494:	200d883a 	mov	r6,r4
   10498:	2900152e 	bgeu	r5,r4,104f0 <__udivsi3+0x5c>
   1049c:	28001416 	blt	r5,zero,104f0 <__udivsi3+0x5c>
   104a0:	00800804 	movi	r2,32
   104a4:	00c00044 	movi	r3,1
   104a8:	00000206 	br	104b4 <__udivsi3+0x20>
   104ac:	10000e26 	beq	r2,zero,104e8 <__udivsi3+0x54>
   104b0:	28000516 	blt	r5,zero,104c8 <__udivsi3+0x34>
   104b4:	294b883a 	add	r5,r5,r5
   104b8:	10bfffc4 	addi	r2,r2,-1
   104bc:	18c7883a 	add	r3,r3,r3
   104c0:	293ffa36 	bltu	r5,r4,104ac <__alt_data_end+0xffff4508>
   104c4:	18000826 	beq	r3,zero,104e8 <__udivsi3+0x54>
   104c8:	0005883a 	mov	r2,zero
   104cc:	31400236 	bltu	r6,r5,104d8 <__udivsi3+0x44>
   104d0:	314dc83a 	sub	r6,r6,r5
   104d4:	10c4b03a 	or	r2,r2,r3
   104d8:	1806d07a 	srli	r3,r3,1
   104dc:	280ad07a 	srli	r5,r5,1
   104e0:	183ffa1e 	bne	r3,zero,104cc <__alt_data_end+0xffff4528>
   104e4:	f800283a 	ret
   104e8:	0005883a 	mov	r2,zero
   104ec:	f800283a 	ret
   104f0:	00c00044 	movi	r3,1
   104f4:	003ff406 	br	104c8 <__alt_data_end+0xffff4524>

000104f8 <__umodsi3>:
   104f8:	2005883a 	mov	r2,r4
   104fc:	2900122e 	bgeu	r5,r4,10548 <__umodsi3+0x50>
   10500:	28001116 	blt	r5,zero,10548 <__umodsi3+0x50>
   10504:	01800804 	movi	r6,32
   10508:	00c00044 	movi	r3,1
   1050c:	00000206 	br	10518 <__umodsi3+0x20>
   10510:	30000c26 	beq	r6,zero,10544 <__umodsi3+0x4c>
   10514:	28000516 	blt	r5,zero,1052c <__umodsi3+0x34>
   10518:	294b883a 	add	r5,r5,r5
   1051c:	31bfffc4 	addi	r6,r6,-1
   10520:	18c7883a 	add	r3,r3,r3
   10524:	293ffa36 	bltu	r5,r4,10510 <__alt_data_end+0xffff456c>
   10528:	18000626 	beq	r3,zero,10544 <__umodsi3+0x4c>
   1052c:	1806d07a 	srli	r3,r3,1
   10530:	11400136 	bltu	r2,r5,10538 <__umodsi3+0x40>
   10534:	1145c83a 	sub	r2,r2,r5
   10538:	280ad07a 	srli	r5,r5,1
   1053c:	183ffb1e 	bne	r3,zero,1052c <__alt_data_end+0xffff4588>
   10540:	f800283a 	ret
   10544:	f800283a 	ret
   10548:	00c00044 	movi	r3,1
   1054c:	003ff706 	br	1052c <__alt_data_end+0xffff4588>

00010550 <_printf_r>:
   10550:	defffd04 	addi	sp,sp,-12
   10554:	dfc00015 	stw	ra,0(sp)
   10558:	d9800115 	stw	r6,4(sp)
   1055c:	d9c00215 	stw	r7,8(sp)
   10560:	20c00217 	ldw	r3,8(r4)
   10564:	01800074 	movhi	r6,1
   10568:	31830f04 	addi	r6,r6,3132
   1056c:	19800115 	stw	r6,4(r3)
   10570:	280d883a 	mov	r6,r5
   10574:	21400217 	ldw	r5,8(r4)
   10578:	d9c00104 	addi	r7,sp,4
   1057c:	00106f40 	call	106f4 <___vfprintf_internal_r>
   10580:	dfc00017 	ldw	ra,0(sp)
   10584:	dec00304 	addi	sp,sp,12
   10588:	f800283a 	ret

0001058c <printf>:
   1058c:	defffc04 	addi	sp,sp,-16
   10590:	dfc00015 	stw	ra,0(sp)
   10594:	d9400115 	stw	r5,4(sp)
   10598:	d9800215 	stw	r6,8(sp)
   1059c:	d9c00315 	stw	r7,12(sp)
   105a0:	00800074 	movhi	r2,1
   105a4:	10849104 	addi	r2,r2,4676
   105a8:	10800017 	ldw	r2,0(r2)
   105ac:	01400074 	movhi	r5,1
   105b0:	29430f04 	addi	r5,r5,3132
   105b4:	10c00217 	ldw	r3,8(r2)
   105b8:	d9800104 	addi	r6,sp,4
   105bc:	19400115 	stw	r5,4(r3)
   105c0:	200b883a 	mov	r5,r4
   105c4:	11000217 	ldw	r4,8(r2)
   105c8:	0010c200 	call	10c20 <__vfprintf_internal>
   105cc:	dfc00017 	ldw	ra,0(sp)
   105d0:	dec00404 	addi	sp,sp,16
   105d4:	f800283a 	ret

000105d8 <_puts_r>:
   105d8:	defffd04 	addi	sp,sp,-12
   105dc:	dc000015 	stw	r16,0(sp)
   105e0:	2021883a 	mov	r16,r4
   105e4:	2809883a 	mov	r4,r5
   105e8:	dfc00215 	stw	ra,8(sp)
   105ec:	dc400115 	stw	r17,4(sp)
   105f0:	2823883a 	mov	r17,r5
   105f4:	001066c0 	call	1066c <strlen>
   105f8:	81400217 	ldw	r5,8(r16)
   105fc:	01000074 	movhi	r4,1
   10600:	21030f04 	addi	r4,r4,3132
   10604:	29000115 	stw	r4,4(r5)
   10608:	100f883a 	mov	r7,r2
   1060c:	880d883a 	mov	r6,r17
   10610:	8009883a 	mov	r4,r16
   10614:	0010c3c0 	call	10c3c <__sfvwrite_small_dev>
   10618:	00ffffc4 	movi	r3,-1
   1061c:	10c00926 	beq	r2,r3,10644 <_puts_r+0x6c>
   10620:	81400217 	ldw	r5,8(r16)
   10624:	01800074 	movhi	r6,1
   10628:	01c00044 	movi	r7,1
   1062c:	28800117 	ldw	r2,4(r5)
   10630:	31844b04 	addi	r6,r6,4396
   10634:	8009883a 	mov	r4,r16
   10638:	103ee83a 	callr	r2
   1063c:	10bfffe0 	cmpeqi	r2,r2,-1
   10640:	0085c83a 	sub	r2,zero,r2
   10644:	dfc00217 	ldw	ra,8(sp)
   10648:	dc400117 	ldw	r17,4(sp)
   1064c:	dc000017 	ldw	r16,0(sp)
   10650:	dec00304 	addi	sp,sp,12
   10654:	f800283a 	ret

00010658 <puts>:
   10658:	00800074 	movhi	r2,1
   1065c:	10849104 	addi	r2,r2,4676
   10660:	200b883a 	mov	r5,r4
   10664:	11000017 	ldw	r4,0(r2)
   10668:	00105d81 	jmpi	105d8 <_puts_r>

0001066c <strlen>:
   1066c:	2005883a 	mov	r2,r4
   10670:	10c00007 	ldb	r3,0(r2)
   10674:	18000226 	beq	r3,zero,10680 <strlen+0x14>
   10678:	10800044 	addi	r2,r2,1
   1067c:	003ffc06 	br	10670 <__alt_data_end+0xffff46cc>
   10680:	1105c83a 	sub	r2,r2,r4
   10684:	f800283a 	ret

00010688 <print_repeat>:
   10688:	defffb04 	addi	sp,sp,-20
   1068c:	dc800315 	stw	r18,12(sp)
   10690:	dc400215 	stw	r17,8(sp)
   10694:	dc000115 	stw	r16,4(sp)
   10698:	dfc00415 	stw	ra,16(sp)
   1069c:	2025883a 	mov	r18,r4
   106a0:	2823883a 	mov	r17,r5
   106a4:	d9800005 	stb	r6,0(sp)
   106a8:	3821883a 	mov	r16,r7
   106ac:	04000a0e 	bge	zero,r16,106d8 <print_repeat+0x50>
   106b0:	88800117 	ldw	r2,4(r17)
   106b4:	01c00044 	movi	r7,1
   106b8:	d80d883a 	mov	r6,sp
   106bc:	880b883a 	mov	r5,r17
   106c0:	9009883a 	mov	r4,r18
   106c4:	103ee83a 	callr	r2
   106c8:	843fffc4 	addi	r16,r16,-1
   106cc:	103ff726 	beq	r2,zero,106ac <__alt_data_end+0xffff4708>
   106d0:	00bfffc4 	movi	r2,-1
   106d4:	00000106 	br	106dc <print_repeat+0x54>
   106d8:	0005883a 	mov	r2,zero
   106dc:	dfc00417 	ldw	ra,16(sp)
   106e0:	dc800317 	ldw	r18,12(sp)
   106e4:	dc400217 	ldw	r17,8(sp)
   106e8:	dc000117 	ldw	r16,4(sp)
   106ec:	dec00504 	addi	sp,sp,20
   106f0:	f800283a 	ret

000106f4 <___vfprintf_internal_r>:
   106f4:	deffe504 	addi	sp,sp,-108
   106f8:	d8c00804 	addi	r3,sp,32
   106fc:	ddc01815 	stw	r23,96(sp)
   10700:	dd801715 	stw	r22,92(sp)
   10704:	dd401615 	stw	r21,88(sp)
   10708:	dd001515 	stw	r20,84(sp)
   1070c:	dcc01415 	stw	r19,80(sp)
   10710:	dc801315 	stw	r18,76(sp)
   10714:	dc401215 	stw	r17,72(sp)
   10718:	dc001115 	stw	r16,68(sp)
   1071c:	dfc01a15 	stw	ra,104(sp)
   10720:	df001915 	stw	fp,100(sp)
   10724:	2029883a 	mov	r20,r4
   10728:	2823883a 	mov	r17,r5
   1072c:	382d883a 	mov	r22,r7
   10730:	d9800f15 	stw	r6,60(sp)
   10734:	0021883a 	mov	r16,zero
   10738:	d8000e15 	stw	zero,56(sp)
   1073c:	d8000a15 	stw	zero,40(sp)
   10740:	002b883a 	mov	r21,zero
   10744:	0027883a 	mov	r19,zero
   10748:	0025883a 	mov	r18,zero
   1074c:	d8000c15 	stw	zero,48(sp)
   10750:	d8000b15 	stw	zero,44(sp)
   10754:	002f883a 	mov	r23,zero
   10758:	d8c00915 	stw	r3,36(sp)
   1075c:	d8c00f17 	ldw	r3,60(sp)
   10760:	19000003 	ldbu	r4,0(r3)
   10764:	20803fcc 	andi	r2,r4,255
   10768:	1080201c 	xori	r2,r2,128
   1076c:	10bfe004 	addi	r2,r2,-128
   10770:	10011e26 	beq	r2,zero,10bec <___vfprintf_internal_r+0x4f8>
   10774:	00c00044 	movi	r3,1
   10778:	b8c01426 	beq	r23,r3,107cc <___vfprintf_internal_r+0xd8>
   1077c:	1dc00216 	blt	r3,r23,10788 <___vfprintf_internal_r+0x94>
   10780:	b8000626 	beq	r23,zero,1079c <___vfprintf_internal_r+0xa8>
   10784:	00011506 	br	10bdc <___vfprintf_internal_r+0x4e8>
   10788:	01400084 	movi	r5,2
   1078c:	b9401d26 	beq	r23,r5,10804 <___vfprintf_internal_r+0x110>
   10790:	014000c4 	movi	r5,3
   10794:	b9402b26 	beq	r23,r5,10844 <___vfprintf_internal_r+0x150>
   10798:	00011006 	br	10bdc <___vfprintf_internal_r+0x4e8>
   1079c:	01400944 	movi	r5,37
   107a0:	1140fc26 	beq	r2,r5,10b94 <___vfprintf_internal_r+0x4a0>
   107a4:	88800117 	ldw	r2,4(r17)
   107a8:	d9000005 	stb	r4,0(sp)
   107ac:	01c00044 	movi	r7,1
   107b0:	d80d883a 	mov	r6,sp
   107b4:	880b883a 	mov	r5,r17
   107b8:	a009883a 	mov	r4,r20
   107bc:	103ee83a 	callr	r2
   107c0:	1000d81e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   107c4:	84000044 	addi	r16,r16,1
   107c8:	00010406 	br	10bdc <___vfprintf_internal_r+0x4e8>
   107cc:	01400c04 	movi	r5,48
   107d0:	1140fa26 	beq	r2,r5,10bbc <___vfprintf_internal_r+0x4c8>
   107d4:	01400944 	movi	r5,37
   107d8:	11400a1e 	bne	r2,r5,10804 <___vfprintf_internal_r+0x110>
   107dc:	d8800005 	stb	r2,0(sp)
   107e0:	88800117 	ldw	r2,4(r17)
   107e4:	b80f883a 	mov	r7,r23
   107e8:	d80d883a 	mov	r6,sp
   107ec:	880b883a 	mov	r5,r17
   107f0:	a009883a 	mov	r4,r20
   107f4:	103ee83a 	callr	r2
   107f8:	1000ca1e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   107fc:	84000044 	addi	r16,r16,1
   10800:	0000f506 	br	10bd8 <___vfprintf_internal_r+0x4e4>
   10804:	25fff404 	addi	r23,r4,-48
   10808:	bdc03fcc 	andi	r23,r23,255
   1080c:	00c00244 	movi	r3,9
   10810:	1dc00936 	bltu	r3,r23,10838 <___vfprintf_internal_r+0x144>
   10814:	00bfffc4 	movi	r2,-1
   10818:	90800426 	beq	r18,r2,1082c <___vfprintf_internal_r+0x138>
   1081c:	01400284 	movi	r5,10
   10820:	9009883a 	mov	r4,r18
   10824:	0010d4c0 	call	10d4c <__mulsi3>
   10828:	00000106 	br	10830 <___vfprintf_internal_r+0x13c>
   1082c:	0005883a 	mov	r2,zero
   10830:	b8a5883a 	add	r18,r23,r2
   10834:	0000e206 	br	10bc0 <___vfprintf_internal_r+0x4cc>
   10838:	01400b84 	movi	r5,46
   1083c:	1140e426 	beq	r2,r5,10bd0 <___vfprintf_internal_r+0x4dc>
   10840:	05c00084 	movi	r23,2
   10844:	213ff404 	addi	r4,r4,-48
   10848:	27003fcc 	andi	fp,r4,255
   1084c:	00c00244 	movi	r3,9
   10850:	1f000936 	bltu	r3,fp,10878 <___vfprintf_internal_r+0x184>
   10854:	00bfffc4 	movi	r2,-1
   10858:	98800426 	beq	r19,r2,1086c <___vfprintf_internal_r+0x178>
   1085c:	01400284 	movi	r5,10
   10860:	9809883a 	mov	r4,r19
   10864:	0010d4c0 	call	10d4c <__mulsi3>
   10868:	00000106 	br	10870 <___vfprintf_internal_r+0x17c>
   1086c:	0005883a 	mov	r2,zero
   10870:	e0a7883a 	add	r19,fp,r2
   10874:	0000d906 	br	10bdc <___vfprintf_internal_r+0x4e8>
   10878:	00c01b04 	movi	r3,108
   1087c:	10c0d226 	beq	r2,r3,10bc8 <___vfprintf_internal_r+0x4d4>
   10880:	013fffc4 	movi	r4,-1
   10884:	99000226 	beq	r19,r4,10890 <___vfprintf_internal_r+0x19c>
   10888:	d8000b15 	stw	zero,44(sp)
   1088c:	00000106 	br	10894 <___vfprintf_internal_r+0x1a0>
   10890:	04c00044 	movi	r19,1
   10894:	01001a44 	movi	r4,105
   10898:	11001626 	beq	r2,r4,108f4 <___vfprintf_internal_r+0x200>
   1089c:	20800916 	blt	r4,r2,108c4 <___vfprintf_internal_r+0x1d0>
   108a0:	010018c4 	movi	r4,99
   108a4:	11008826 	beq	r2,r4,10ac8 <___vfprintf_internal_r+0x3d4>
   108a8:	01001904 	movi	r4,100
   108ac:	11001126 	beq	r2,r4,108f4 <___vfprintf_internal_r+0x200>
   108b0:	01001604 	movi	r4,88
   108b4:	1100c81e 	bne	r2,r4,10bd8 <___vfprintf_internal_r+0x4e4>
   108b8:	00c00044 	movi	r3,1
   108bc:	d8c00e15 	stw	r3,56(sp)
   108c0:	00001506 	br	10918 <___vfprintf_internal_r+0x224>
   108c4:	01001cc4 	movi	r4,115
   108c8:	11009826 	beq	r2,r4,10b2c <___vfprintf_internal_r+0x438>
   108cc:	20800416 	blt	r4,r2,108e0 <___vfprintf_internal_r+0x1ec>
   108d0:	01001bc4 	movi	r4,111
   108d4:	1100c01e 	bne	r2,r4,10bd8 <___vfprintf_internal_r+0x4e4>
   108d8:	05400204 	movi	r21,8
   108dc:	00000f06 	br	1091c <___vfprintf_internal_r+0x228>
   108e0:	01001d44 	movi	r4,117
   108e4:	11000d26 	beq	r2,r4,1091c <___vfprintf_internal_r+0x228>
   108e8:	01001e04 	movi	r4,120
   108ec:	11000a26 	beq	r2,r4,10918 <___vfprintf_internal_r+0x224>
   108f0:	0000b906 	br	10bd8 <___vfprintf_internal_r+0x4e4>
   108f4:	d8c00a17 	ldw	r3,40(sp)
   108f8:	b7000104 	addi	fp,r22,4
   108fc:	18000726 	beq	r3,zero,1091c <___vfprintf_internal_r+0x228>
   10900:	df000d15 	stw	fp,52(sp)
   10904:	b5c00017 	ldw	r23,0(r22)
   10908:	b800080e 	bge	r23,zero,1092c <___vfprintf_internal_r+0x238>
   1090c:	05efc83a 	sub	r23,zero,r23
   10910:	02400044 	movi	r9,1
   10914:	00000606 	br	10930 <___vfprintf_internal_r+0x23c>
   10918:	05400404 	movi	r21,16
   1091c:	b0c00104 	addi	r3,r22,4
   10920:	d8c00d15 	stw	r3,52(sp)
   10924:	b5c00017 	ldw	r23,0(r22)
   10928:	d8000a15 	stw	zero,40(sp)
   1092c:	0013883a 	mov	r9,zero
   10930:	d839883a 	mov	fp,sp
   10934:	b8001726 	beq	r23,zero,10994 <___vfprintf_internal_r+0x2a0>
   10938:	a80b883a 	mov	r5,r21
   1093c:	b809883a 	mov	r4,r23
   10940:	da401015 	stw	r9,64(sp)
   10944:	00104940 	call	10494 <__udivsi3>
   10948:	a80b883a 	mov	r5,r21
   1094c:	1009883a 	mov	r4,r2
   10950:	102d883a 	mov	r22,r2
   10954:	0010d4c0 	call	10d4c <__mulsi3>
   10958:	b885c83a 	sub	r2,r23,r2
   1095c:	00c00244 	movi	r3,9
   10960:	da401017 	ldw	r9,64(sp)
   10964:	18800216 	blt	r3,r2,10970 <___vfprintf_internal_r+0x27c>
   10968:	10800c04 	addi	r2,r2,48
   1096c:	00000506 	br	10984 <___vfprintf_internal_r+0x290>
   10970:	d8c00e17 	ldw	r3,56(sp)
   10974:	18000226 	beq	r3,zero,10980 <___vfprintf_internal_r+0x28c>
   10978:	10800dc4 	addi	r2,r2,55
   1097c:	00000106 	br	10984 <___vfprintf_internal_r+0x290>
   10980:	108015c4 	addi	r2,r2,87
   10984:	e0800005 	stb	r2,0(fp)
   10988:	b02f883a 	mov	r23,r22
   1098c:	e7000044 	addi	fp,fp,1
   10990:	003fe806 	br	10934 <__alt_data_end+0xffff4990>
   10994:	e6efc83a 	sub	r23,fp,sp
   10998:	9dc5c83a 	sub	r2,r19,r23
   1099c:	0080090e 	bge	zero,r2,109c4 <___vfprintf_internal_r+0x2d0>
   109a0:	e085883a 	add	r2,fp,r2
   109a4:	01400c04 	movi	r5,48
   109a8:	d8c00917 	ldw	r3,36(sp)
   109ac:	e009883a 	mov	r4,fp
   109b0:	e0c0032e 	bgeu	fp,r3,109c0 <___vfprintf_internal_r+0x2cc>
   109b4:	e7000044 	addi	fp,fp,1
   109b8:	21400005 	stb	r5,0(r4)
   109bc:	e0bffa1e 	bne	fp,r2,109a8 <__alt_data_end+0xffff4a04>
   109c0:	e6efc83a 	sub	r23,fp,sp
   109c4:	d8c00b17 	ldw	r3,44(sp)
   109c8:	4dd1883a 	add	r8,r9,r23
   109cc:	922dc83a 	sub	r22,r18,r8
   109d0:	18001626 	beq	r3,zero,10a2c <___vfprintf_internal_r+0x338>
   109d4:	48000a26 	beq	r9,zero,10a00 <___vfprintf_internal_r+0x30c>
   109d8:	00800b44 	movi	r2,45
   109dc:	d8800805 	stb	r2,32(sp)
   109e0:	88800117 	ldw	r2,4(r17)
   109e4:	01c00044 	movi	r7,1
   109e8:	d9800804 	addi	r6,sp,32
   109ec:	880b883a 	mov	r5,r17
   109f0:	a009883a 	mov	r4,r20
   109f4:	103ee83a 	callr	r2
   109f8:	10004a1e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   109fc:	84000044 	addi	r16,r16,1
   10a00:	0580070e 	bge	zero,r22,10a20 <___vfprintf_internal_r+0x32c>
   10a04:	b00f883a 	mov	r7,r22
   10a08:	01800c04 	movi	r6,48
   10a0c:	880b883a 	mov	r5,r17
   10a10:	a009883a 	mov	r4,r20
   10a14:	00106880 	call	10688 <print_repeat>
   10a18:	1000421e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   10a1c:	85a1883a 	add	r16,r16,r22
   10a20:	e02d883a 	mov	r22,fp
   10a24:	bf2fc83a 	sub	r23,r23,fp
   10a28:	00002006 	br	10aac <___vfprintf_internal_r+0x3b8>
   10a2c:	0580090e 	bge	zero,r22,10a54 <___vfprintf_internal_r+0x360>
   10a30:	b00f883a 	mov	r7,r22
   10a34:	01800804 	movi	r6,32
   10a38:	880b883a 	mov	r5,r17
   10a3c:	a009883a 	mov	r4,r20
   10a40:	da401015 	stw	r9,64(sp)
   10a44:	00106880 	call	10688 <print_repeat>
   10a48:	da401017 	ldw	r9,64(sp)
   10a4c:	1000351e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   10a50:	85a1883a 	add	r16,r16,r22
   10a54:	483ff226 	beq	r9,zero,10a20 <__alt_data_end+0xffff4a7c>
   10a58:	00800b44 	movi	r2,45
   10a5c:	d8800805 	stb	r2,32(sp)
   10a60:	88800117 	ldw	r2,4(r17)
   10a64:	01c00044 	movi	r7,1
   10a68:	d9800804 	addi	r6,sp,32
   10a6c:	880b883a 	mov	r5,r17
   10a70:	a009883a 	mov	r4,r20
   10a74:	103ee83a 	callr	r2
   10a78:	10002a1e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   10a7c:	84000044 	addi	r16,r16,1
   10a80:	003fe706 	br	10a20 <__alt_data_end+0xffff4a7c>
   10a84:	b5bfffc4 	addi	r22,r22,-1
   10a88:	b0800003 	ldbu	r2,0(r22)
   10a8c:	01c00044 	movi	r7,1
   10a90:	d9800804 	addi	r6,sp,32
   10a94:	d8800805 	stb	r2,32(sp)
   10a98:	88800117 	ldw	r2,4(r17)
   10a9c:	880b883a 	mov	r5,r17
   10aa0:	a009883a 	mov	r4,r20
   10aa4:	103ee83a 	callr	r2
   10aa8:	10001e1e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   10aac:	8585c83a 	sub	r2,r16,r22
   10ab0:	b5c9883a 	add	r4,r22,r23
   10ab4:	e085883a 	add	r2,fp,r2
   10ab8:	013ff216 	blt	zero,r4,10a84 <__alt_data_end+0xffff4ae0>
   10abc:	1021883a 	mov	r16,r2
   10ac0:	dd800d17 	ldw	r22,52(sp)
   10ac4:	00004406 	br	10bd8 <___vfprintf_internal_r+0x4e4>
   10ac8:	00800044 	movi	r2,1
   10acc:	1480080e 	bge	r2,r18,10af0 <___vfprintf_internal_r+0x3fc>
   10ad0:	95ffffc4 	addi	r23,r18,-1
   10ad4:	b80f883a 	mov	r7,r23
   10ad8:	01800804 	movi	r6,32
   10adc:	880b883a 	mov	r5,r17
   10ae0:	a009883a 	mov	r4,r20
   10ae4:	00106880 	call	10688 <print_repeat>
   10ae8:	10000e1e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   10aec:	85e1883a 	add	r16,r16,r23
   10af0:	b0800017 	ldw	r2,0(r22)
   10af4:	01c00044 	movi	r7,1
   10af8:	d80d883a 	mov	r6,sp
   10afc:	d8800005 	stb	r2,0(sp)
   10b00:	88800117 	ldw	r2,4(r17)
   10b04:	880b883a 	mov	r5,r17
   10b08:	a009883a 	mov	r4,r20
   10b0c:	b5c00104 	addi	r23,r22,4
   10b10:	103ee83a 	callr	r2
   10b14:	1000031e 	bne	r2,zero,10b24 <___vfprintf_internal_r+0x430>
   10b18:	84000044 	addi	r16,r16,1
   10b1c:	b82d883a 	mov	r22,r23
   10b20:	00002d06 	br	10bd8 <___vfprintf_internal_r+0x4e4>
   10b24:	00bfffc4 	movi	r2,-1
   10b28:	00003106 	br	10bf0 <___vfprintf_internal_r+0x4fc>
   10b2c:	b5c00017 	ldw	r23,0(r22)
   10b30:	b7000104 	addi	fp,r22,4
   10b34:	b809883a 	mov	r4,r23
   10b38:	001066c0 	call	1066c <strlen>
   10b3c:	9091c83a 	sub	r8,r18,r2
   10b40:	102d883a 	mov	r22,r2
   10b44:	0200090e 	bge	zero,r8,10b6c <___vfprintf_internal_r+0x478>
   10b48:	400f883a 	mov	r7,r8
   10b4c:	01800804 	movi	r6,32
   10b50:	880b883a 	mov	r5,r17
   10b54:	a009883a 	mov	r4,r20
   10b58:	da001015 	stw	r8,64(sp)
   10b5c:	00106880 	call	10688 <print_repeat>
   10b60:	da001017 	ldw	r8,64(sp)
   10b64:	103fef1e 	bne	r2,zero,10b24 <__alt_data_end+0xffff4b80>
   10b68:	8221883a 	add	r16,r16,r8
   10b6c:	88800117 	ldw	r2,4(r17)
   10b70:	b00f883a 	mov	r7,r22
   10b74:	b80d883a 	mov	r6,r23
   10b78:	880b883a 	mov	r5,r17
   10b7c:	a009883a 	mov	r4,r20
   10b80:	103ee83a 	callr	r2
   10b84:	103fe71e 	bne	r2,zero,10b24 <__alt_data_end+0xffff4b80>
   10b88:	85a1883a 	add	r16,r16,r22
   10b8c:	e02d883a 	mov	r22,fp
   10b90:	00001106 	br	10bd8 <___vfprintf_internal_r+0x4e4>
   10b94:	00c00044 	movi	r3,1
   10b98:	04ffffc4 	movi	r19,-1
   10b9c:	d8000e15 	stw	zero,56(sp)
   10ba0:	d8c00a15 	stw	r3,40(sp)
   10ba4:	05400284 	movi	r21,10
   10ba8:	9825883a 	mov	r18,r19
   10bac:	d8000c15 	stw	zero,48(sp)
   10bb0:	d8000b15 	stw	zero,44(sp)
   10bb4:	182f883a 	mov	r23,r3
   10bb8:	00000806 	br	10bdc <___vfprintf_internal_r+0x4e8>
   10bbc:	ddc00b15 	stw	r23,44(sp)
   10bc0:	05c00084 	movi	r23,2
   10bc4:	00000506 	br	10bdc <___vfprintf_internal_r+0x4e8>
   10bc8:	00c00044 	movi	r3,1
   10bcc:	d8c00c15 	stw	r3,48(sp)
   10bd0:	05c000c4 	movi	r23,3
   10bd4:	00000106 	br	10bdc <___vfprintf_internal_r+0x4e8>
   10bd8:	002f883a 	mov	r23,zero
   10bdc:	d8c00f17 	ldw	r3,60(sp)
   10be0:	18c00044 	addi	r3,r3,1
   10be4:	d8c00f15 	stw	r3,60(sp)
   10be8:	003edc06 	br	1075c <__alt_data_end+0xffff47b8>
   10bec:	8005883a 	mov	r2,r16
   10bf0:	dfc01a17 	ldw	ra,104(sp)
   10bf4:	df001917 	ldw	fp,100(sp)
   10bf8:	ddc01817 	ldw	r23,96(sp)
   10bfc:	dd801717 	ldw	r22,92(sp)
   10c00:	dd401617 	ldw	r21,88(sp)
   10c04:	dd001517 	ldw	r20,84(sp)
   10c08:	dcc01417 	ldw	r19,80(sp)
   10c0c:	dc801317 	ldw	r18,76(sp)
   10c10:	dc401217 	ldw	r17,72(sp)
   10c14:	dc001117 	ldw	r16,68(sp)
   10c18:	dec01b04 	addi	sp,sp,108
   10c1c:	f800283a 	ret

00010c20 <__vfprintf_internal>:
   10c20:	00800074 	movhi	r2,1
   10c24:	10849104 	addi	r2,r2,4676
   10c28:	300f883a 	mov	r7,r6
   10c2c:	280d883a 	mov	r6,r5
   10c30:	200b883a 	mov	r5,r4
   10c34:	11000017 	ldw	r4,0(r2)
   10c38:	00106f41 	jmpi	106f4 <___vfprintf_internal_r>

00010c3c <__sfvwrite_small_dev>:
   10c3c:	2880000b 	ldhu	r2,0(r5)
   10c40:	1080020c 	andi	r2,r2,8
   10c44:	10002126 	beq	r2,zero,10ccc <__sfvwrite_small_dev+0x90>
   10c48:	2880008f 	ldh	r2,2(r5)
   10c4c:	defffa04 	addi	sp,sp,-24
   10c50:	dc000015 	stw	r16,0(sp)
   10c54:	dfc00515 	stw	ra,20(sp)
   10c58:	dd000415 	stw	r20,16(sp)
   10c5c:	dcc00315 	stw	r19,12(sp)
   10c60:	dc800215 	stw	r18,8(sp)
   10c64:	dc400115 	stw	r17,4(sp)
   10c68:	2821883a 	mov	r16,r5
   10c6c:	10001216 	blt	r2,zero,10cb8 <__sfvwrite_small_dev+0x7c>
   10c70:	2027883a 	mov	r19,r4
   10c74:	3025883a 	mov	r18,r6
   10c78:	3823883a 	mov	r17,r7
   10c7c:	05010004 	movi	r20,1024
   10c80:	04400b0e 	bge	zero,r17,10cb0 <__sfvwrite_small_dev+0x74>
   10c84:	880f883a 	mov	r7,r17
   10c88:	a440010e 	bge	r20,r17,10c90 <__sfvwrite_small_dev+0x54>
   10c8c:	01c10004 	movi	r7,1024
   10c90:	8140008f 	ldh	r5,2(r16)
   10c94:	900d883a 	mov	r6,r18
   10c98:	9809883a 	mov	r4,r19
   10c9c:	0010cf40 	call	10cf4 <_write_r>
   10ca0:	0080050e 	bge	zero,r2,10cb8 <__sfvwrite_small_dev+0x7c>
   10ca4:	88a3c83a 	sub	r17,r17,r2
   10ca8:	90a5883a 	add	r18,r18,r2
   10cac:	003ff406 	br	10c80 <__alt_data_end+0xffff4cdc>
   10cb0:	0005883a 	mov	r2,zero
   10cb4:	00000706 	br	10cd4 <__sfvwrite_small_dev+0x98>
   10cb8:	8080000b 	ldhu	r2,0(r16)
   10cbc:	10801014 	ori	r2,r2,64
   10cc0:	8080000d 	sth	r2,0(r16)
   10cc4:	00bfffc4 	movi	r2,-1
   10cc8:	00000206 	br	10cd4 <__sfvwrite_small_dev+0x98>
   10ccc:	00bfffc4 	movi	r2,-1
   10cd0:	f800283a 	ret
   10cd4:	dfc00517 	ldw	ra,20(sp)
   10cd8:	dd000417 	ldw	r20,16(sp)
   10cdc:	dcc00317 	ldw	r19,12(sp)
   10ce0:	dc800217 	ldw	r18,8(sp)
   10ce4:	dc400117 	ldw	r17,4(sp)
   10ce8:	dc000017 	ldw	r16,0(sp)
   10cec:	dec00604 	addi	sp,sp,24
   10cf0:	f800283a 	ret

00010cf4 <_write_r>:
   10cf4:	defffd04 	addi	sp,sp,-12
   10cf8:	dc000015 	stw	r16,0(sp)
   10cfc:	04000074 	movhi	r16,1
   10d00:	dc400115 	stw	r17,4(sp)
   10d04:	8404e004 	addi	r16,r16,4992
   10d08:	2023883a 	mov	r17,r4
   10d0c:	2809883a 	mov	r4,r5
   10d10:	300b883a 	mov	r5,r6
   10d14:	380d883a 	mov	r6,r7
   10d18:	dfc00215 	stw	ra,8(sp)
   10d1c:	80000015 	stw	zero,0(r16)
   10d20:	0010f740 	call	10f74 <write>
   10d24:	00ffffc4 	movi	r3,-1
   10d28:	10c0031e 	bne	r2,r3,10d38 <_write_r+0x44>
   10d2c:	80c00017 	ldw	r3,0(r16)
   10d30:	18000126 	beq	r3,zero,10d38 <_write_r+0x44>
   10d34:	88c00015 	stw	r3,0(r17)
   10d38:	dfc00217 	ldw	ra,8(sp)
   10d3c:	dc400117 	ldw	r17,4(sp)
   10d40:	dc000017 	ldw	r16,0(sp)
   10d44:	dec00304 	addi	sp,sp,12
   10d48:	f800283a 	ret

00010d4c <__mulsi3>:
   10d4c:	0005883a 	mov	r2,zero
   10d50:	20000726 	beq	r4,zero,10d70 <__mulsi3+0x24>
   10d54:	20c0004c 	andi	r3,r4,1
   10d58:	2008d07a 	srli	r4,r4,1
   10d5c:	18000126 	beq	r3,zero,10d64 <__mulsi3+0x18>
   10d60:	1145883a 	add	r2,r2,r5
   10d64:	294b883a 	add	r5,r5,r5
   10d68:	203ffa1e 	bne	r4,zero,10d54 <__alt_data_end+0xffff4db0>
   10d6c:	f800283a 	ret
   10d70:	f800283a 	ret

00010d74 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10d74:	0010e001 	jmpi	10e00 <alt_iic_isr_register>

00010d78 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d78:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d7c:	00bfff84 	movi	r2,-2
   10d80:	2084703a 	and	r2,r4,r2
   10d84:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10d88:	00c00044 	movi	r3,1
   10d8c:	d0a05317 	ldw	r2,-32436(gp)
   10d90:	194a983a 	sll	r5,r3,r5
   10d94:	288ab03a 	or	r5,r5,r2
   10d98:	d1605315 	stw	r5,-32436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d9c:	d0a05317 	ldw	r2,-32436(gp)
   10da0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10da4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   10da8:	0005883a 	mov	r2,zero
   10dac:	f800283a 	ret

00010db0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10db0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10db4:	00bfff84 	movi	r2,-2
   10db8:	2084703a 	and	r2,r4,r2
   10dbc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10dc0:	00ffff84 	movi	r3,-2
   10dc4:	d0a05317 	ldw	r2,-32436(gp)
   10dc8:	194a183a 	rol	r5,r3,r5
   10dcc:	288a703a 	and	r5,r5,r2
   10dd0:	d1605315 	stw	r5,-32436(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10dd4:	d0a05317 	ldw	r2,-32436(gp)
   10dd8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ddc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   10de0:	0005883a 	mov	r2,zero
   10de4:	f800283a 	ret

00010de8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10de8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   10dec:	00800044 	movi	r2,1
   10df0:	1144983a 	sll	r2,r2,r5
   10df4:	10c4703a 	and	r2,r2,r3
}
   10df8:	1004c03a 	cmpne	r2,r2,zero
   10dfc:	f800283a 	ret

00010e00 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10e00:	00c007c4 	movi	r3,31
   10e04:	19401616 	blt	r3,r5,10e60 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10e08:	defffe04 	addi	sp,sp,-8
   10e0c:	dfc00115 	stw	ra,4(sp)
   10e10:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e14:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e18:	00ffff84 	movi	r3,-2
   10e1c:	80c6703a 	and	r3,r16,r3
   10e20:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   10e24:	280490fa 	slli	r2,r5,3
   10e28:	00c00074 	movhi	r3,1
   10e2c:	18c4e604 	addi	r3,r3,5016
   10e30:	1885883a 	add	r2,r3,r2
   10e34:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   10e38:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   10e3c:	30000226 	beq	r6,zero,10e48 <alt_iic_isr_register+0x48>
   10e40:	0010d780 	call	10d78 <alt_ic_irq_enable>
   10e44:	00000106 	br	10e4c <alt_iic_isr_register+0x4c>
   10e48:	0010db00 	call	10db0 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10e4c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   10e50:	dfc00117 	ldw	ra,4(sp)
   10e54:	dc000017 	ldw	r16,0(sp)
   10e58:	dec00204 	addi	sp,sp,8
   10e5c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   10e60:	00bffa84 	movi	r2,-22
   10e64:	f800283a 	ret

00010e68 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10e68:	deffff04 	addi	sp,sp,-4
   10e6c:	01000074 	movhi	r4,1
   10e70:	01400074 	movhi	r5,1
   10e74:	dfc00015 	stw	ra,0(sp)
   10e78:	21044c04 	addi	r4,r4,4400
   10e7c:	29449504 	addi	r5,r5,4692

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10e80:	2140061e 	bne	r4,r5,10e9c <alt_load+0x34>
   10e84:	01000074 	movhi	r4,1
   10e88:	01400074 	movhi	r5,1
   10e8c:	21000804 	addi	r4,r4,32
   10e90:	29400804 	addi	r5,r5,32
   10e94:	2140121e 	bne	r4,r5,10ee0 <alt_load+0x78>
   10e98:	00000b06 	br	10ec8 <alt_load+0x60>
   10e9c:	00c00074 	movhi	r3,1
   10ea0:	18c49504 	addi	r3,r3,4692
   10ea4:	1907c83a 	sub	r3,r3,r4
   10ea8:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10eac:	10fff526 	beq	r2,r3,10e84 <__alt_data_end+0xffff4ee0>
    {
      *to++ = *from++;
   10eb0:	114f883a 	add	r7,r2,r5
   10eb4:	39c00017 	ldw	r7,0(r7)
   10eb8:	110d883a 	add	r6,r2,r4
   10ebc:	10800104 	addi	r2,r2,4
   10ec0:	31c00015 	stw	r7,0(r6)
   10ec4:	003ff906 	br	10eac <__alt_data_end+0xffff4f08>
   10ec8:	01000074 	movhi	r4,1
   10ecc:	01400074 	movhi	r5,1
   10ed0:	21042c04 	addi	r4,r4,4272
   10ed4:	29442c04 	addi	r5,r5,4272

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10ed8:	2140101e 	bne	r4,r5,10f1c <alt_load+0xb4>
   10edc:	00000b06 	br	10f0c <alt_load+0xa4>
   10ee0:	00c00074 	movhi	r3,1
   10ee4:	18c06004 	addi	r3,r3,384
   10ee8:	1907c83a 	sub	r3,r3,r4
   10eec:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10ef0:	10fff526 	beq	r2,r3,10ec8 <__alt_data_end+0xffff4f24>
    {
      *to++ = *from++;
   10ef4:	114f883a 	add	r7,r2,r5
   10ef8:	39c00017 	ldw	r7,0(r7)
   10efc:	110d883a 	add	r6,r2,r4
   10f00:	10800104 	addi	r2,r2,4
   10f04:	31c00015 	stw	r7,0(r6)
   10f08:	003ff906 	br	10ef0 <__alt_data_end+0xffff4f4c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10f0c:	001102c0 	call	1102c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10f10:	dfc00017 	ldw	ra,0(sp)
   10f14:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10f18:	00110301 	jmpi	11030 <alt_icache_flush_all>
   10f1c:	00c00074 	movhi	r3,1
   10f20:	18c44c04 	addi	r3,r3,4400
   10f24:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10f28:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10f2c:	18bff726 	beq	r3,r2,10f0c <__alt_data_end+0xffff4f68>
    {
      *to++ = *from++;
   10f30:	114f883a 	add	r7,r2,r5
   10f34:	39c00017 	ldw	r7,0(r7)
   10f38:	110d883a 	add	r6,r2,r4
   10f3c:	10800104 	addi	r2,r2,4
   10f40:	31c00015 	stw	r7,0(r6)
   10f44:	003ff906 	br	10f2c <__alt_data_end+0xffff4f88>

00010f48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10f48:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10f4c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10f50:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10f54:	0010fd40 	call	10fd4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10f58:	0010ff40 	call	10ff4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10f5c:	d1a05417 	ldw	r6,-32432(gp)
   10f60:	d1605517 	ldw	r5,-32428(gp)
   10f64:	d1205617 	ldw	r4,-32424(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10f68:	dfc00017 	ldw	ra,0(sp)
   10f6c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10f70:	00103741 	jmpi	10374 <main>

00010f74 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10f74:	00800044 	movi	r2,1
   10f78:	20800226 	beq	r4,r2,10f84 <write+0x10>
   10f7c:	00800084 	movi	r2,2
   10f80:	2080041e 	bne	r4,r2,10f94 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10f84:	01000074 	movhi	r4,1
   10f88:	000f883a 	mov	r7,zero
   10f8c:	21049304 	addi	r4,r4,4684
   10f90:	0010ff81 	jmpi	10ff8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10f94:	d0a00617 	ldw	r2,-32744(gp)
   10f98:	10000926 	beq	r2,zero,10fc0 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10f9c:	deffff04 	addi	sp,sp,-4
   10fa0:	dfc00015 	stw	ra,0(sp)
   10fa4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10fa8:	00c01444 	movi	r3,81
   10fac:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10fb0:	00bfffc4 	movi	r2,-1
   10fb4:	dfc00017 	ldw	ra,0(sp)
   10fb8:	dec00104 	addi	sp,sp,4
   10fbc:	f800283a 	ret
   10fc0:	d0a05204 	addi	r2,gp,-32440
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10fc4:	00c01444 	movi	r3,81
   10fc8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10fcc:	00bfffc4 	movi	r2,-1
   10fd0:	f800283a 	ret

00010fd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10fd4:	deffff04 	addi	sp,sp,-4
   10fd8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10fdc:	00110a80 	call	110a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10fe0:	00800044 	movi	r2,1
   10fe4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10fe8:	dfc00017 	ldw	ra,0(sp)
   10fec:	dec00104 	addi	sp,sp,4
   10ff0:	f800283a 	ret

00010ff4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10ff4:	f800283a 	ret

00010ff8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10ff8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10ffc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   11000:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   11004:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   11008:	2980072e 	bgeu	r5,r6,11028 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   1100c:	38c00037 	ldwio	r3,0(r7)
   11010:	18ffffec 	andhi	r3,r3,65535
   11014:	183ffc26 	beq	r3,zero,11008 <__alt_data_end+0xffff5064>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   11018:	28c00007 	ldb	r3,0(r5)
   1101c:	20c00035 	stwio	r3,0(r4)
   11020:	29400044 	addi	r5,r5,1
   11024:	003ff806 	br	11008 <__alt_data_end+0xffff5064>

  return count;
}
   11028:	f800283a 	ret

0001102c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1102c:	f800283a 	ret

00011030 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11030:	f800283a 	ret

00011034 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11034:	213ffe84 	addi	r4,r4,-6
   11038:	008003c4 	movi	r2,15
   1103c:	11001636 	bltu	r2,r4,11098 <alt_exception_cause_generated_bad_addr+0x64>
   11040:	200890ba 	slli	r4,r4,2
   11044:	00800074 	movhi	r2,1
   11048:	10841604 	addi	r2,r2,4184
   1104c:	2089883a 	add	r4,r4,r2
   11050:	20800017 	ldw	r2,0(r4)
   11054:	1000683a 	jmp	r2
   11058:	000110a0 	cmpeqi	zero,zero,1090
   1105c:	000110a0 	cmpeqi	zero,zero,1090
   11060:	00011098 	cmpnei	zero,zero,1090
   11064:	00011098 	cmpnei	zero,zero,1090
   11068:	00011098 	cmpnei	zero,zero,1090
   1106c:	000110a0 	cmpeqi	zero,zero,1090
   11070:	00011098 	cmpnei	zero,zero,1090
   11074:	00011098 	cmpnei	zero,zero,1090
   11078:	000110a0 	cmpeqi	zero,zero,1090
   1107c:	000110a0 	cmpeqi	zero,zero,1090
   11080:	00011098 	cmpnei	zero,zero,1090
   11084:	000110a0 	cmpeqi	zero,zero,1090
   11088:	00011098 	cmpnei	zero,zero,1090
   1108c:	00011098 	cmpnei	zero,zero,1090
   11090:	00011098 	cmpnei	zero,zero,1090
   11094:	000110a0 	cmpeqi	zero,zero,1090
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11098:	0005883a 	mov	r2,zero
   1109c:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   110a0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   110a4:	f800283a 	ret

000110a8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   110a8:	000170fa 	wrctl	ienable,zero
   110ac:	f800283a 	ret
